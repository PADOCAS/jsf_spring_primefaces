<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         xmlns:jsp="http://java.sun.com/xml/ns/javaee/jsp"
         xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         id="WebApp_ID"
         metadata-complete="true"
         version="4.0">
    <!--Colocar o ID WebApp_ID-->
    <!--Colocar o metadata = true (Para não fazer o nosso projeto eliminar nossos pequenos fragmentos de processos, verificando todas bibliotecas, deixando lento a inicialização do projeto-->
    <!--Declarar >> xmlns:jsp="http://java.sun.com/xml/ns/javaee/jsp" para poder usar JSP se quiser no projeto-->
    <!--Declarar xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" para ter todos os recursos do Java XML-->
    <display-name>Projeto JSF + Spring + PrimeFaces</display-name>   

    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    
    <!-- Configuração as páginas vão abrir com o JSF -->
    <!--Para logar no sistema, usar http://localhost:8080/jsf_spring_primefaces/index.jsp ou direto como definimos o welcome-file-list >> http://localhost:8080/jsf_spring_primefaces  -->
    <!--TODOO:: Depois que acessou a primeira vez direto em (http://localhost:8080/jsf_spring_primefaces) não funciona mais assim.. apenas se entrar pelo index.jsp mesmo ou public/login.jsf-->
    <servlet>
        <servlet-name>Faces Servlet</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!--Vai acessar tudo com jsf pela url-->
    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>*.jsf</url-pattern>
    </servlet-mapping>                    
    <session-config>
        <!--Invalida a sessão em 120 minutos-->
        <session-timeout>
            120
        </session-timeout>
        <!--Trabalhar com cookie na sessão-->
        <tracking-mode>COOKIE</tracking-mode>
    </session-config>
    
    <!--Configurações de páginas de erro:-->
    <error-page>
        <!--Exceção de Acesso Negado do Spring >> joga para pagina acessoNegado.jsf -->
        <exception-type>org.springframework.security.access.AccessDeniedException</exception-type>
        <location>/error/acessoNegado.jsf</location>
    </error-page>
    
    <error-page>
        <!--Exceção de Página não encontrada >> joga para pagina paginaNaoEncontrada.jsf -->
        <exception-type>con.sun.faces.context.FacesFileNotFoundException</exception-type>
        <location>/error/paginaNaoEncontrada.jsf</location>
    </error-page>
    
    <error-page>
        <!--Exceção de erro 403 acesso negado >> joga para pagina acessoNegado.jsf -->
        <error-code>403</error-code>
        <location>/error/acessoNegado.jsf</location>
    </error-page>
    
    <error-page>
        <!--Exceção de erro 404 - Página não encontrada >> joga para pagina 404.jsf -->
        <error-code>404</error-code>
        <location>/error/404.jsf</location>
    </error-page>
    
    <error-page>
        <!--Exceção de erro 500 erro interno do servidor >> joga para pagina error.jsf -->
        <error-code>500</error-code>
        <location>/error/error.jsf</location>
    </error-page>
    
    <!--Deixar nosso projeto compativel com JSP para não ter nenhum problema com JSP quando utilizar-->
    <jsp-config>
        <jsp-property-group>
            <!--Assim não funciona para o payara.. /** não sei para o TomCat-->
            <!--<url-pattern>/**</url-pattern>-->
            <url-pattern>*.jsp</url-pattern>
            <el-ignored>false</el-ignored>  
        </jsp-property-group>
    </jsp-config>
    
    <!--Parametros para a aplicação: -->
    <!--Para os comentários nas páginas jsf não sair no navegador versão para o usuário -->
    <context-param>
        <param-name>javax.faces.FACELETS_SKIP_COMMENTS</param-name>
        <param-value>true</param-value>
    </context-param>
    
    <!--Para os componentes de texto (inputs e tal) renderizar componentes filhos dentro dele quando quiser -->
    <context-param>
        <param-name>con.sun.faces.allowTextChildren</param-name>
        <param-value>true</param-value>
    </context-param>
    
    <!--Para evitar um erro se tiver usando uma versão de container que uma biblioteca seja menor que a 2.1 (causaria erro)-->
    <context-param>
        <param-name>con.sun.faces.expressionFactory</param-name>
        <param-value>con.sun.el.ExpressionFactoryImpl</param-value>
    </context-param>
    
    <!--Declarar os 3 arquivos de configuração que criamos para subir, caso contrário não vai ler eles (o faces-config.xml não precisa já é lido automatico)-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            /WEB-INF/applicationContext.xml 
            /WEB-INF/spring-servlet-servlet.xml
            /WEB-INF/applicationContext-security.xml
        </param-value>
    </context-param>
    
    <!--Declarar a taglib do arquivo xml para o springsecurity poder ser chamados nas paginas jsf-->
    <context-param>
        <param-name>javax.faces.FACELETS_LIBRARIES</param-name>
        <param-value>/WEB-INF/springsecurity.taglib.xml</param-value>
    </context-param>
    
    <!--Tempo que uma mudança da pagina jsf demora para ser atualizada no desenvolvimento após salvar a mudança na IDe e ja automaticamente ver no navegador (tirando o cache de tempo padrão)-->
    <context-param>
        <param-name>javax.faces.FACELETS_REFRESH_PERIOD</param-name>
        <param-value>0</param-value> <!--0 Segundos -->
    </context-param>
    
    <!--Quais as extensões de paginas que vamos trabalhar-->
    <!--JSF não é criada assim a pagina, ela é chamada apenas no navegador.. as paginas na verdade são xhtml html ou jsp-->
    <context-param>
        <param-name>javax.faces.DEFAULT_SUFFIX</param-name>
        <param-value>.xhtml .html .jsp</param-value>
    </context-param>
    
    <!--Falar para o JSF qual processo está nosso projeto (em produção, homologação, etc.)-->
    <!--Vamos deixar em produção que é os erros são apresentados da forma que o cliente verá-->
    <context-param>
        <param-name>javax.faces.PROJECT_STAGE</param-name>
        <param-value>Production</param-value>
    </context-param>
    
    <!--Tema para o primefaces trabalhar (padrao cinza smoothness), vamos colocar o flick-->
    <!--Lembrando que para pegar o THEME corretamente, precisa fazer o download do JAR dos themas e colocar em Web Pages/WEB-INF/lib/  caso contrário não pegará os themas-->
    <context-param>
        <param-name>primefaces.THEME</param-name>
        <param-value>cupertino</param-value>
    </context-param>
       
    <!--Filtro-->
    <!--Declarar nosso FilterOpenSessionInView (que criamos para trabalhar como Filtro-->
    <filter>
        <filter-name>conexaoFilter</filter-name>
        <filter-class>com.mycompany.project.filter.FilterOpenSessionInView</filter-class>
    </filter>
    
    <!--SpringSecurityFilterChain apenas declara a classe do Spring-->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    
    <!--Codificação para o Spring-->
    <filter>
        <filter-name>encoding-filter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>ISO-8859-1</param-value>
        </init-param>
    </filter>
    
    <filter>
        <filter-name>PrimeFaces FileUpload Filter</filter-name>
        <filter-class>org.primefaces.webapp.filter.FileUploadFilter</filter-class>
    </filter>
    
    <!--Filter Mapping-->
    <!--Mapeando todas as nossas declarações de filtros acima para todas as URLS-->
    <filter-mapping>
        <filter-name>encoding-filter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>conexaoFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>PrimeFaces FileUpload Filter</filter-name>
        <servlet-name>Faces Servlets</servlet-name>
        <url-pattern>*.jsf</url-pattern>
    </filter-mapping>
    
    <!--Configurações DataSource pool criado direto no context.xml (Funcionando OK para TOMCAT) (arquivo context.xml) -->
    <!--Payara não utilizamos o context.xml.. vamos ver o comportamento sem essa parte...-->
    <!--Vamos tentar usar assim tambem ver como vai se comportar assim que começar a trabalhar com banco de dados-->
    <!--Testar sem esse resource-ref > não é no TomCat que vamos usar-->
    <resource-ref>
        <description>DataSource datasource</description>
        <!--TomCAt-->
        <!--<res-ref-name>jdbc/datasource</res-ref-name>-->
        <!--payara-->
        <res-ref-name>jdbc/__jsfspring_ds</res-ref-name> 
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>
    
    <!--Responsavel para ter acesso a todos os dados do Spring de qualquer lugar-->
    <listener>
        <listener-class>com.mycompany.project.listener.ContextLoaderListenerUtil</listener-class>
    </listener>
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>
    
    <listener>
        <listener-class>com.mycompany.project.listener.CustomListener</listener-class>
    </listener>
    
    <!--Caso quiser interceptar sessoes que foram logadas para pegar informações-->
    <listener>
        <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
    </listener>
    
    <!--Dispatcher-->
    <servlet>
        <servlet-name>spring-servlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <!--Mapeando todo spring-servlet-->
    <!--Deve ser mapeado com o nome do nosso contextPath para sempre que acessar o caminho root encaminhar para o welcomeFile (pagina de login.jsp)-->
    <servlet-mapping>
        <servlet-name>spring-servlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
