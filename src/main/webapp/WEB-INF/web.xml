<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         xmlns:jsp="http://java.sun.com/xml/ns/javaee/jsp"
         xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         id="WebApp_ID"
         metadata-complete="true"
         version="4.0">
    <!--Colocar o ID WebApp_ID-->
    <!--Colocar o metadata = true (Para não fazer o nosso projeto eliminar nossos pequenos fragmentos de processos, verificando todas bibliotecas, deixando lento a inicialização do projeto-->
    <!--Declarar >> xmlns:jsp="http://java.sun.com/xml/ns/javaee/jsp" para poder usar JSP se quiser no projeto-->
    <!--Declarar xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" para ter todos os recursos do Java XML-->
    <display-name>Projeto JSF + Spring + PrimeFaces</display-name>
    
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list> 
    
    <!-- Configuração as páginas vão abrir com o JSF -->
    <!--Para logar no sistema, usar http://localhost:8080/jsf_spring_primefaces/index.jsf ou direto como definimos o welcome-file-list >> http://localhost:8080/jsf_spring_primefaces  -->
    <servlet>
        <servlet-name>Faces Servlet</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!--Vai acessar tudo com jsf pela url-->
    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>*.jsf</url-pattern>
    </servlet-mapping>                    
    <session-config>
        <!--Invalida a sessão em 120 minutos-->
        <session-timeout>
            120
        </session-timeout>
        <!--Trabalhar com cookie na sessão-->
        <tracking-mode>COOKIE</tracking-mode>
    </session-config>
    
    <!--Configurações de páginas de erro:-->
    <error-page>
        <!--Exceção de Acesso Negado do Spring >> joga para pagina acessoNegado.jsf -->
        <exception-type>org.springframework.security.access.AccessDeniedException</exception-type>
        <location>/error/acessoNegado.jsf</location>
    </error-page>
    
    <error-page>
        <!--Exceção de Página não encontrada >> joga para pagina paginaNaoEncontrada.jsf -->
        <exception-type>con.sun.faces.context.FacesFileNotFoundException</exception-type>
        <location>/error/paginaNaoEncontrada.jsf</location>
    </error-page>
    
    <error-page>
        <!--Exceção de erro 403 acesso negado >> joga para pagina acessoNegado.jsf -->
        <error-code>403</error-code>
        <location>/error/acessoNegado.jsf</location>
    </error-page>
    
    <error-page>
        <!--Exceção de erro 500 erro interno do servidor >> joga para pagina error.jsf -->
        <error-code>500</error-code>
        <location>/error/error.jsf</location>
    </error-page>
    
    <!--Parametros para a aplicação: -->
    <!--Para os comentários nas páginas jsf não sair no navegador versão para o usuário -->
    <context-param>
        <param-name>javax.faces.FACELETS_SKIP_COMMENTS</param-name>
        <param-value>true</param-value>
    </context-param>
    
    <!--Para os componentes de texto (inputs e tal) renderizar componentes filhos dentro dele quando quiser -->
    <context-param>
        <param-name>con.sun.faces.allowTextChildren</param-name>
        <param-value>true</param-value>
    </context-param>
    
    <!--Para evitar um erro se tiver usando uma versão de container que uma biblioteca seja menor que a 2.1 (causaria erro)-->
    <context-param>
        <param-name>con.sun.faces.expressionFactory</param-name>
        <param-value>con.sun.el.ExpressionFactoryImpl</param-value>
    </context-param>
    
    <!--Tempo que uma mudança da pagina jsf demora para ser atualizada no desenvolvimento após salvar a mudança na IDe e ja automaticamente ver no navegador (tirando o cache de tempo padrão)-->
    <context-param>
        <param-name>javax.faces.FACELETS_REFRESH_PERIOD</param-name>
        <param-value>0</param-value> <!--0 Segundos -->
    </context-param>
    
    <!--Quais as extensões de paginas que vamos trabalhar-->
    <!--JSF não é criada assim a pagina, ela é chamada apenas no navegador.. as paginas na verdade são xhtml html ou jsp-->
    <context-param>
        <param-name>javax.faces.DEFAULT_SUFFIX</param-name>
        <param-value>.xhtml .html .jsp</param-value>
    </context-param>
    
    <!--Falar para o JSF qual processo está nosso projeto (em produção, homologação, etc.)-->
    <!--Vamos deixar em produção que é os erros são apresentados da forma que o cliente verá-->
    <context-param>
        <param-name>javax.faces.PROJECT_STAGE</param-name>
        <param-value>Production</param-value>
    </context-param>
    
    <!--Tema para o primefaces trabalhar (padrao cinza smoothness), vamos colocar o flick-->
    <context-param>
        <param-name>primefaces.THEME</param-name>
        <param-value>flick</param-value>
    </context-param>
    
    <!--Filtro-->
    <filter>
        <filter-name>PrimeFaces FileUpload Filter</filter-name>
        <filter-class>org.primefaces.webapp.filter.FileUploadFilter</filter-class>
    </filter>
    
    <!--Filter Mapping-->
    <filter-mapping>
        <filter-name>PrimeFaces FileUpload Filter</filter-name>
        <servlet-name>Faces Servlets</servlet-name>
        <url-pattern>*.jsf</url-pattern>
    </filter-mapping>
    
    <!--Configurações DataSource pool criado direto no context.xml (Funcionando OK) (arquivo context.xml) -->
    <!--Vamos tentar usar assim tambem ver como vai se comportar assim que começar a trabalhar com banco de dados-->
<!--    <resource-ref>
        <description>DataSource datasource</description>
        <res-ref-name>jdbc/datasource</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>-->
    
    <!--Tentando usar o dataSource direto do glassfish (payara):-->
    <!--Vamos ver quando começar a utilizar banco como vamos trabalhar assim.. pesquisar depois-->
    <data-source>
        <name>java:global/caixaki_ds</name>
        <class-name>org.postgresql.ds.PGSimpleDataSource</class-name>
        <server-name>localhost</server-name>
        <port-number>5432</port-number>
        <database-name>jsf_spring_primefaces</database-name>
        <user>caixaki</user>
        <!-- Example of using a Payara password alias in the datasource definition -->
        <password>admin</password>
        <!-- Example of how to use a Payara specific custom connection pool setting -->
        <property>
            <name>fish.payara.slow-query-threshold-in-seconds</name>
            <value>5</value>
        </property>
        <property>
            <name>fish.payara.log-jdbc-calls</name>
            <value>true</value>
        </property>
    </data-source>
</web-app>
